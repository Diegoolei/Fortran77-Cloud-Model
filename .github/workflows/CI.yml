name: Continuous Integration
on:
  push:
    branches: [ "to_pkg" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        gcc_v: [13] # Version of GFortran we want to use.
        python-version: ['3.10', '3.11']
    env:
      FC: gfortran-${{ matrix.gcc_v }}
      GCC_V: ${{ matrix.gcc_v }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
    - name: Setup Fortran Compiler
      uses: fortran-lang/setup-fortran@v1
      id: setup-fortran
      with:
        compiler: gcc
        version: ${{ matrix.gcc_v }}
    - name: Install Python
      uses: actions/setup-python@v5 # Use pip to install latest CMake, & FORD/Jin2For, etc.
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v2
    - name: Setup Fortran Package Manager
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Python dependencies
      if: contains( matrix.os, 'ubuntu')
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel ford numpy matplotlib numpy scipy
        if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi
    - name: Install GFortran Linux
      if: contains( matrix.os, 'ubuntu')
      run: |
        sudo apt-get install lcov
        sudo update-alternatives \
           --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc_v }} 100 \
           --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ matrix.gcc_v }} \
           --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ matrix.gcc_v }}
    - name: Compile
      run: fpm build --profile release
      
    - name: Install cloudmodel
      run:
        cd python; pip install .

    - name: Check dir3
      run: |
        sudo ls -a

  build-manylinux:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.7.1-manylinux2014_x86_64
        with:
          python-versions: 'cp310-cp310 cp311-cp311'
          build-requirements: 'cython numpy'
          pip-wheel-args: "-w ./dist --no-deps"
      - name: Remove non-compatible packages
        run: |
          sudo rm ./dist/cloudmodel-0.2.8-py3-none-any.whl
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
  deploy:
    needs: [build, build-manylinux]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11"]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USER }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
      run: |
        python -m pip install --upgrade pip
        pip install twine
        twine upload --repository testpypi dist/* --skip-existing dist/*